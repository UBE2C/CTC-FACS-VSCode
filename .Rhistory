for (e in seq_along(files)) {
progressBar$tick()
sList[[e]] <- flowCore::read.FCS(files[e])
}
names(sList) <- sNames
if (test_set == TRUE)  {
assign("test_lst", test_lst, envir = .GlobalEnv)
assign("SortList", sList, envir = .GlobalEnv)
message("Both the test_set and the SortList have been compiled into the following objects: test_list and SortList")
} else {
assign("SortList", sList, envir = .GlobalEnv)
message("Task complete, the FCS files were compiled into the following object: SortList")
}
}
load_fcs(path = paste0(path, FACS_files))
names(SortList)
keyword(SortList[[28]])
keyword(SortList[[28]], compact = TRUE)
names(SortList[[28]])
names(SortList[28])
grep("leukocyte", names(SortList))
SortList[grep("leukocyte", names(SortList))]
names(SortList)[grep("leukocyte", names(SortList))]
files <- list.files(path, ".fcs$", full.names = TURE, recursive = TRUE)
files <- list.files(path, ".fcs$", full.names = TRUE, recursive = TRUE)
head(files)
paste0(stringr::str_extract(files, "2022......."),
stringr::str_extract(files, "Specimen.*."))
SortList[grep("leukocyte", names(SortList))]
names(SortList)[grep("leukocyte", names(SortList))]
files
test_list <- vector(mode = "list", length = length(files))
for (i in seq_along(files)) {
test_list[i] <- flowCore::read.FCS()
}
for (i in seq_along(files)) {
test_list[i] <- flowCore::read.FCS(files[i])
}
warnings()
names <- paste0(stringr::str_extract(files, "2022......."),
stringr::str_extract(files, "Specimen.*."))
names(test_list) <- names
names(test_list)
names(test_list)[grep("leukocyte"), names(test_list)]
names(test_list)[grep("leukocyte", names(test_list))]
# Load fcs files from the wd in a recursive manner
load_fcs = function(path = getwd(), file_pattern = ".fcs$", test_set = FALSE, full_path = TRUE, recursive = TRUE) {
files <- list.files(path = path, pattern = file_pattern, full.names = full_path, recursive = recursive)
sNames <- paste0(stringr::str_extract(files, "2022......."),
stringr::str_extract(files, "Specimen.*."))
if (test_set == TRUE) {
test_lst <- list()
for (e in 1:5) {
test_lst[[e]] <- flowCore::read.FCS(files[e])
}
names(test_lst) <- sNames[1:5]
message("A test set was requested, compiling a 5 element set into the object test_lst and the SortList")
} else {
message("No test_set was requested, Compiling the FCS files into the SortList")
}
progressBar <- progress::progress_bar$new(format = "(:spin) [:bar] :percent [Elapsed time: :elapsedfull || Estimated time remaining: :eta]",
total = length(files),
complete = "=",
incomplete = "-",
current = ">",
clear = FALSE,
width = 100)
sList <- vector(mode = "list", length = length(files))
for (e in seq_along(files)) {
progressBar$tick()
sList[[e]] <- flowCore::read.FCS(files[e])
}
names(sList) <- sNames
if (test_set == TRUE)  {
assign("test_lst", test_lst, envir = .GlobalEnv)
assign("SortList", sList, envir = .GlobalEnv)
message("Both the test_set and the SortList have been compiled into the following objects: test_list and SortList")
} else {
assign("SortList", sList, envir = .GlobalEnv)
message("Task complete, the FCS files were compiled into the following object: SortList")
}
}
load_fcs(path = paste0(path, FACS_files))
length(list.files(path = path, pattern = ".fcs$", full.names = TRUE, recursive = TRUE))
unique(names(test_list))
length(unique(names(test_list)))
keyword(test_list[[1]], compact = TRUE)
test_list <- list()
for (i in seq_along(files)) {
test_list[i] <- flowCore::read.FCS(files[i])
}
load_fcs_2 = function(path = getwd(), file_pattern = ".fcs$", test_set = FALSE, full_path = TRUE, recursive = TRUE) {
files <- list.files(path = path, pattern = file_pattern, full.names = full_path, recursive = recursive)
sNames <- paste0(stringr::str_extract(files, "2022......."),
stringr::str_extract(files, "Specimen.*."))
if (test_set == TRUE) {
test_lst <- list()
for (e in 1:5) {
test_lst[[e]] <- flowCore::read.FCS(files[e])
}
names(test_lst) <- sNames[1:5]
message("A test set was requested, compiling a 5 element set into the object test_lst and the SortList")
} else {
message("No test_set was requested, Compiling the FCS files into the SortList")
}
sList <- vector(mode = "list", length = length(files))
for (e in seq_along(files)) {
sList[[e]] <- flowCore::read.FCS(files[e])
}
names(sList) <- sNames
if (test_set == TRUE)  {
assign("test_lst", test_lst, envir = .GlobalEnv)
assign("SortList", sList, envir = .GlobalEnv)
message("Both the test_set and the SortList have been compiled into the following objects: test_list and SortList")
} else {
assign("SortList_2", sList, envir = .GlobalEnv)
message("Task complete, the FCS files were compiled into the following object: SortList")
}
}
load_fcs_2(path = paste0(path, FACS_files))
load_fcs_2 = function(path = getwd(), file_pattern = ".fcs$", test_set = FALSE, full_path = TRUE, recursive = TRUE) {
files <- list.files(path = path, pattern = file_pattern, full.names = full_path, recursive = recursive)
sNames <- paste0(stringr::str_extract(files, "2022......."),
stringr::str_extract(files, "Specimen.*."))
if (test_set == TRUE) {
test_lst <- list()
for (e in 1:5) {
test_lst[[e]] <- flowCore::read.FCS(files[e])
}
names(test_lst) <- sNames[1:5]
message("A test set was requested, compiling a 5 element set into the object test_lst and the SortList")
} else {
message("No test_set was requested, Compiling the FCS files into the SortList")
}
progressBar <- progress::progress_bar$new(format = "(:spin) [:bar] :percent [Elapsed time: :elapsedfull || Estimated time remaining: :eta]",
total = length(files),
complete = "=",
incomplete = "-",
current = ">",
clear = FALSE,
width = 100)
sList <- vector(mode = "list", length = length(files))
for (e in seq_along(files)) {
progressBar$tick()
sList[[e]] <- tryCatch({
flowCore::read.FCS(files[e])
}, error = function(err) {
message(sprintf("Failed to load file: %s", files[e]))
NULL
})
}
names(sList) <- sNames
if (test_set == TRUE)  {
assign("test_lst", test_lst, envir = .GlobalEnv)
assign("SortList", sList, envir = .GlobalEnv)
message("Both the test_set and the SortList have been compiled into the following objects: test_list and SortList")
} else {
assign("SortList_2", sList, envir = .GlobalEnv)
message("Task complete, the FCS files were compiled into the following object: SortList")
}
}
load_fcs_2(path = paste0(path, FACS_files))
test_list <- vector(mode = "list", length = length(files))
for (i in seq_along(files)) {
test_list[[i]] <- flowCore::read.FCS(files[i])
}
test_list <- list()
for (i in seq_along(files)) {
test_list[[i]] <- flowCore::read.FCS(files[i])
}
getwd()
path
files_2 <- list.files(path = getwd(), pattern = ".fcs$", full.names = TRUE, recursive = TRUE)
files <- list.files(path = getwd(), pattern = ".fcs$", full.names = TRUE, recursive = TRUE)
sNames <- paste0(stringr::str_extract(files, "2022......."),
stringr::str_extract(files, "Specimen.*."))
progressBar <- progress::progress_bar$new(format = "(:spin) [:bar] :percent [Elapsed time: :elapsedfull || Estimated time remaining: :eta]",
total = length(files),
complete = "=",
incomplete = "-",
current = ">",
clear = FALSE,
width = 100)
sList <- vector(mode = "list", length = length(files))
for (e in seq_along(files)) {
progressBar$tick()
sList[[e]] <- tryCatch({
flowCore::read.FCS(files[e])
}, error = function(err) {
message(sprintf("Failed to load file: %s", files[e]))
NULL
})
}
names(sList) <- sNames
if (test_set == TRUE)  {
assign("test_lst", test_lst, envir = .GlobalEnv)
assign("SortList", sList, envir = .GlobalEnv)
message("Both the test_set and the SortList have been compiled into the following objects: test_list and SortList")
} else {
assign("SortList_2", sList, envir = .GlobalEnv)
message("Task complete, the FCS files were compiled into the following object: SortList")
}
test_set <- FALSE
if (test_set == TRUE)  {
assign("test_lst", test_lst, envir = .GlobalEnv)
assign("SortList", sList, envir = .GlobalEnv)
message("Both the test_set and the SortList have been compiled into the following objects: test_list and SortList")
} else {
assign("SortList_2", sList, envir = .GlobalEnv)
message("Task complete, the FCS files were compiled into the following object: SortList")
}
load_fcs_2 = function(file_path = getwd(), file_pattern = ".fcs$", test_set = FALSE, full_path = TRUE, recursively = TRUE) {
files <- list.files(path = file_path, pattern = file_pattern, full.names = full_path, recursive = recursively)
sNames <- paste0(stringr::str_extract(files, "2022......."),
stringr::str_extract(files, "Specimen.*."))
if (test_set == TRUE) {
test_lst <- list()
for (e in 1:5) {
test_lst[[e]] <- flowCore::read.FCS(files[e])
}
names(test_lst) <- sNames[1:5]
message("A test set was requested, compiling a 5 element set into the object test_lst and the SortList")
} else {
message("No test_set was requested, Compiling the FCS files into the SortList")
}
progressBar <- progress::progress_bar$new(format = "(:spin) [:bar] :percent [Elapsed time: :elapsedfull || Estimated time remaining: :eta]",
total = length(files),
complete = "=",
incomplete = "-",
current = ">",
clear = FALSE,
width = 100)
sList <- vector(mode = "list", length = length(files))
for (e in seq_along(files)) {
progressBar$tick()
sList[[e]] <- tryCatch({
flowCore::read.FCS(files[e])
}, error = function(err) {
message(sprintf("Failed to load file: %s", files[e]))
NULL
})
}
names(sList) <- sNames
if (test_set == TRUE)  {
assign("test_lst", test_lst, envir = .GlobalEnv)
assign("SortList", sList, envir = .GlobalEnv)
message("Both the test_set and the SortList have been compiled into the following objects: test_list and SortList")
} else {
assign("SortList_2", sList, envir = .GlobalEnv)
message("Task complete, the FCS files were compiled into the following object: SortList")
}
}
rm(progressBar)
rm(sList, sNames)
rm(files)
rm(test_set)
FACS_files
load_fcs_2(file_path = paste0(path, FACS_files))
files <- list.files(paste0(path, "/", FACS_files), ".fcs$", full.names = TRUE, recursive = TRUE)
test_list <- vector(mode = "list", length = length(files))
for (i in seq_along(files)) {
test_list[[i]] <- flowCore::read.FCS(files[i])
}
keyword(test_list[[1]])
for (e in seq_along(files)) {
names2[e] <- paste0(keyword(test_list[[e]])$"TUBE NAME", test_list[[e]])$"$DATE")
names2 <- vector(mode = "list", length = length(files))
for (e in seq_along(files)) {
names2[e] <- paste0(keyword(test_list[[e]])$"$DATE", keyword(test_list[[e]])$"TUBE NAME")
}
names <- paste0(stringr::str_extract(files, "2022......."),
stringr::str_extract(files, "Specimen.*."))
names
names2
paste0(keyword(test_list[[1]])$"$DATE", " ", keyword(test_list[[1]])$"TUBE NAME")
names2 <- vector(mode = "list", length = length(files))
names2 <- vector(mode = "character", length = length(files))
for (e in seq_along(files)) {
names2[e] <- paste0(keyword(test_list[[e]])$"$DATE", " ", keyword(test_list[[e]])$"TUBE NAME")
}
names2
names(test_list) <- names2
grep("leukocyte", names(test_list))
load_fcs_2 = function(file_path = getwd(), file_pattern = ".fcs$", test_set = FALSE, full_path = TRUE, recursively = TRUE) {
files <- list.files(path = file_path, pattern = file_pattern, full.names = full_path, recursive = recursively)
sNames <- paste0(stringr::str_extract(files, "2022......."),
stringr::str_extract(files, "Specimen.*."))
if (test_set == TRUE) {
test_lst <- list()
for (e in 1:5) {
test_lst[[e]] <- flowCore::read.FCS(files[e])
}
names(test_lst) <- sNames[1:5]
message("A test set was requested, compiling a 5 element set into the object test_lst and the SortList")
} else {
message("No test_set was requested, Compiling the FCS files into the SortList")
}
progressBar <- progress::progress_bar$new(format = "(:spin) [:bar] :percent [Elapsed time: :elapsedfull || Estimated time remaining: :eta]",
total = length(files),
complete = "=",
incomplete = "-",
current = ">",
clear = FALSE,
width = 100)
sList <- vector(mode = "list", length = length(files))
for (e in seq_along(files)) {
progressBar$tick()
sList[[e]] <- tryCatch({
flowCore::read.FCS(files[e])
}, error = function(err) {
message(sprintf("Failed to load file: %s", files[e]))
NULL
})
}
names(sList) <- sNames
if (test_set == TRUE)  {
assign("test_lst", test_lst, envir = .GlobalEnv)
assign("SortList", sList, envir = .GlobalEnv)
message("Both the test_set and the SortList have been compiled into the following objects: test_list and SortList")
} else {
assign("SortList_2", sList, envir = .GlobalEnv)
message("Task complete, the FCS files were compiled into the following object: SortList")
}
}
load_fcs_2(file_path = paste0(path, FACS_files))
grep("leukocyte", names(test_list))
grep("leukocyte", names(SortList_2))
names2 <- vector(mode = "character", length = length(files))
for (e in seq_along(files)) {
names2[e] <- paste0(keyword(test_list[[e]])$"$DATE", " ", keyword(test_list[[e]])$"$FIL")
}
names(test_list) <- names2
grep("leukocyte", names(test_list))
grep("leukocyte", names(SortList_2))
names(test_list)[grep("leukocyte", names(test_list))]
keyword(test_list[[27]], compact = TRUE)
names2 <- vector(mode = "character", length = length(files))
test_list <- vector(mode = "list", length = length(files))
for (i in seq_along(files)) {
test_list[[i]] <- flowCore::read.FCS(files[i])
}
names2 <- vector(mode = "character", length = length(files))
for (e in seq_along(files)) {
names2[e] <- paste0(keyword(test_list[[e]])$"$DATE", " ", keyword(test_list[[e]])$"TUBE NAME")
}
names(test_list) <- names2
names(test_list)[grep("leukocyte", names(test_list))]
keyword(test_list[[27]], compact = TRUE)
names(test_list[[27]])
names(test_list[27])
names(test_list)[grep("leukocyte", names(test_list))]
grep("leukocyte", names(test_list))
names(test_list[38])
keyword(test_list[[38]], compact = TRUE)
names(test_list[52])
keyword(test_list[[52]], compact = TRUE)
getIndexSort(test_list[[52]])
keyword(test_list[[52]])
keyword(test_list[[52]])$"$BTIM"
keyword(test_list[[36]], compact = TRUE)
keyword(test_list[[37]], compact = TRUE)
keyword(test_list[[38]], compact = TRUE)
for (i in c(38:53)) {
print(i)
}
for (i in c(38:53)) {
print(paste0(test_list[[i]])$"$DATE", " ", keyword(test_list[[i]])$"TUBE NAME", " ", keyword(test_list[[i]])$"$BTIM")))
print(paste0(keyword(test_list[[i]])$"$DATE", " ", keyword(test_list[[i]])$"TUBE NAME", " ", keyword(test_list[[i]])$"$BTIM")))
print(paste0(keyword(test_list[[i]])$"$DATE", " ", keyword(test_list[[i]])$"TUBE NAME", " ", keyword(test_list[[i]])$"$BTIM"))
for (i in c(38:53)) {
print(paste0(keyword(test_list[[i]])$"$DATE", " ", keyword(test_list[[i]])$"TUBE NAME", " ", keyword(test_list[[i]])$"$BTIM"))
}
for (i in c(38:53)) {
print(paste0(keyword(test_list[[i]])$"$DATE", " ", keyword(test_list[[i]])$"$FIL", " ", keyword(test_list[[i]])$"$BTIM"))
}
grep("ALM76C6", names(test_list))
names(test_list[grep("ALM76C6", names(test_list))]
names(test_list)[grep("ALM76C6", names(test_list))]
names(test_list)[grep("ALM80C8", names(test_list))]
grep("ALM80C8", names(test_list))
for (i in c(29:30)) {
print(paste0(keyword(test_list[[i]])$"$DATE", " ", keyword(test_list[[i]])$"$FIL", " ", keyword(test_list[[i]])$"$BTIM"))
}
grep("ALM76C6", names(test_list))
print(paste0(keyword(test_list[[28]])$"$DATE", " ", keyword(test_list[[28]])$"$FIL", " ", keyword(test_list[[28]])$"$BTIM"))
# I will subset the sort list to an index sort list iSorts
iSorts <- SortList[grepl("INX", names(SortList))]
#I will correct some indexing mistakes in iSorts
grep("INX_ALM80C8-004-1", names(iSorts))
names(iSorts)[[18]]
grep("INX_ALM76C6-003-1", names(iSorts))
names(iSorts)[[16]]
names(iSorts)[[17]]
keyword(iSorts[[16]])$"$FIL"
keyword(iSorts[[17]])$"$FIL"
keyword(iSorts[[18]])$"$FIL"
test_vector <- c(1, 2, 3, 4, 5, 6)
test_vector2 <- c("a", "b", "c", "d", "e", "f")
paste0(test_vector, " ", test_vector2)
clear()
# Used library packages
packages <- c("tidyverse", "rebus", "progress", "ggpubr", "ggsci", "rstudioapi", "doSNOW", "foreach", "flowCore", "flowStats", "flowViz", "ggcyto")
lapply(packages, library, character.only = TRUE)
# Define the working directory and the directory containing the .fcs and other necessary files
path <- str_extract(rstudioapi::getActiveDocumentContext()$path, "[/]+[A-Za-z]+[/]+[a-z]+[/]+[A-Za-z]+[/]+[_A-Za-z]+[/]+[-A-Za-z]+")
setwd(path)
FACS_files <- c("/FACS_fcs_csv_files")
# Define the script version for output files, for easier version control, and make a dedicated folder in the WD
define_version_create_folder = function(directory_name = "FACS") {
#define the current script version
#NOTE: the version numbers must match the defined pattern. I  updated the function to accept sub-versions below two digits.
if (nchar(stringr::str_extract(rstudioapi::getActiveDocumentContext()$path, "_V.*")) == 7) {
script_version <- paste0(directory_name, stringr::str_extract(rstudioapi::getActiveDocumentContext()$path, "_V" %R% rebus::one_or_more(ASCII_ALNUM) %R% one_or_more(PUNCT) %R%
one_or_more(ASCII_ALNUM)))
} else {
script_version <- paste0(directory_name, stringr::str_extract(rstudioapi::getActiveDocumentContext()$path, "_V" %R% rebus::one_or_more(ASCII_ALNUM) %R% one_or_more(PUNCT) %R%
one_or_more(ASCII_ALNUM) %R% one_or_more(PUNCT) %R% one_or_more(ASCII_ALNUM)))
}
#check if the current version already has a folder or not and if not it creates one
if (dir.exists(paths = paste0(script_version, "/", "Plots")) == TRUE) {
message("The current script directory is already present. No new directory will be created.")
} else {
message("The current script version has no directory yet.", "\n", "Creating one now using the path:", paste0(getwd(), script_version, "/", "Plots"))
dir.create(path = paste0(script_version, "/", "Plots"), recursive = TRUE)
}
assign("script_version", script_version, envir = .GlobalEnv)
}
define_version_create_folder()
# Load fcs files from the wd in a recursive manner
load_fcs = function(path = getwd(), file_pattern = ".fcs$", test_set = FALSE, full_path = TRUE, recursive = TRUE) {
files <- list.files(path = path, pattern = file_pattern, full.names = full_path, recursive = recursive)
sNames <- paste0(stringr::str_extract(files, "2022......."),
stringr::str_extract(files, "Specimen.*."))
if (test_set == TRUE) {
test_lst <- list()
for (e in 1:5) {
test_lst[[e]] <- flowCore::read.FCS(files[e])
}
names(test_lst) <- sNames[1:5]
message("A test set was requested, compiling a 5 element set into the object test_lst and the SortList")
} else {
message("No test_set was requested, Compiling the FCS files into the SortList")
}
progressBar <- progress::progress_bar$new(format = "(:spin) [:bar] :percent [Elapsed time: :elapsedfull || Estimated time remaining: :eta]",
total = length(files),
complete = "=",
incomplete = "-",
current = ">",
clear = FALSE,
width = 100)
sList <- list()
for (e in seq_along(files)) {
progressBar$tick()
sList[[e]] <- flowCore::read.FCS(files[e])
}
names(sList) <- sNames
if (test_set == TRUE)  {
assign("test_lst", test_lst, envir = .GlobalEnv)
assign("SortList", sList, envir = .GlobalEnv)
message("Both the test_set and the SortList have been compiled into the following objects: test_list and SortList")
} else {
assign("SortList", sList, envir = .GlobalEnv)
message("Task complete, the FCS files were compiled into the following object: SortList")
}
}
load_fcs(path = paste0(path, FACS_files))
# Load fcs files from the wd in a recursive manner
load_fcs = function(path = getwd(), file_pattern = ".fcs$", test_set = FALSE, full_path = TRUE, recursive = TRUE) {
files <- list.files(path = path, pattern = file_pattern, full.names = full_path, recursive = recursive)
sNames <- paste0(stringr::str_extract(files, "[0-9]+[-]+[0-9]+[-]+[0-9]+"), " ",
stringr::str_extract(files, "Specimen.*."))
if (test_set == TRUE) {
test_lst <- list()
for (e in 1:5) {
test_lst[[e]] <- flowCore::read.FCS(files[e])
}
names(test_lst) <- sNames[1:5]
message("A test set was requested, compiling a 5 element set into the object test_lst and the SortList")
} else {
message("No test_set was requested, Compiling the FCS files into the SortList")
}
progressBar <- progress::progress_bar$new(format = "(:spin) [:bar] :percent [Elapsed time: :elapsedfull || Estimated time remaining: :eta]",
total = length(files),
complete = "=",
incomplete = "-",
current = ">",
clear = FALSE,
width = 100)
sList <- vector(mode = "list", length = length(files))
for (e in seq_along(files)) {
progressBar$tick()
sList[[e]] <- flowCore::read.FCS(files[e])
}
names(sList) <- sNames
if (test_set == TRUE)  {
assign("test_lst", test_lst, envir = .GlobalEnv)
assign("SortList", sList, envir = .GlobalEnv)
message("Both the test_set and the SortList have been compiled into the following objects: test_list and SortList")
} else {
assign("SortList", sList, envir = .GlobalEnv)
message("Task complete, the FCS files were compiled into the following object: SortList")
}
}
load_fcs(path = paste0(path, FACS_files))
list.files(getwd())
list.files(paste0(getwd(), "/", FACS_files))
paste0(stringr::str_extract(files, "[0-9]+[-]+[0-9]+[-]+[0-9]+"), " ",
stringr::str_extract(files, "Specimen.*."))
# Define the working directory and the directory containing the .fcs and other necessary files
path <- str_extract(rstudioapi::getActiveDocumentContext()$path, "[/]+[A-Za-z]+[/]+[a-z]+[/]+[A-Za-z]+[/]+[_A-Za-z]+[/]+[-A-Za-z]+")
rstudioapi::getActiveDocumentContext()$path
rstudioapi::getActiveDocumentContext()
